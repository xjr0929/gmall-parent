<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.gmall.product.mapper.BaseAttrInfoMapper">

    <resultMap id="BaseResultMap" type="com.atguigu.gmall.model.product.BaseAttrInfo">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="attrName" column="attr_name" jdbcType="VARCHAR"/>
            <result property="categoryId" column="category_id" jdbcType="BIGINT"/>
            <result property="categoryLevel" column="category_level" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,attr_name,category_id,
        category_level
    </sql>


    <!--
        resultMap 是自定义结果集
        resultType 是默认封装  数据库每查出一条记录，
        new BaseAttrInfo(), 然后把数据方到这个对象中，然后把这个数据返回
        希望所有id=1的记录 只new 一个 BaseAttrInfo(1,价格,61,3,
        剩下的封装到attrValueList 集合中);
    -->
    <!--
    要想实现自定义封装：
        1：mybatis能区分出id（id不同就能代表要不要new对象封装数据）
    -->
    <resultMap id="AttrInfoAndValue"
               type="com.atguigu.gmall.model.product.BaseAttrInfo"
               autoMapping="true">
                <!--autoMapping  开启javaBean的自动映射  数据库的列和javaBean的属性一一对应，符合驼峰命名规则-->
        <!--把结果中的每一条数据封装成BaseAttrInfo类型-->
        <id column="id" property="id"></id> <!--数据库中的id列对应javaBean中的id属性-->
<!--        <result column="attr_name" property="attrName"></result>  &lt;!&ndash;数据库中的attr_name对应BaseAttrInfo中的attrName&ndash;&gt;
        <result column="category_id" property="categoryId"></result>
        <result column="category_level" property="categoryLevel"></result>-->
        <!--查询出的什么数据方到baseAttrValue集合中-->
        <collection property="attrValueList"
                    ofType="com.atguigu.gmall.model.product.BaseAttrValue"
                    autoMapping="true">
                    <id column="vid" property="id"></id> <!--相当于我把vid的值封装到attrValue中的id字段-->
<!--                    <result column="value_name" property="valueName"></result>
                    <result column="attr_id" property="attrId"></result>-->
        </collection>
    </resultMap>
    <select id="getAttrInfoAndValueByCategoryId"
     resultMap="AttrInfoAndValue">
        select bai.*,bav.id vid,bav.value_name,bav.attr_id
        from base_attr_info bai
        left join base_attr_value bav
        on bai.id = bav.attr_id
        where (bai.category_id=#{c1Id} and bai.category_level=1)
        or (bai.category_id=#{c2Id} and bai.category_level=2)
        or (bai.category_id=#{c3Id} and bai.category_level=3)
    </select>
</mapper>



















